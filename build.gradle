
buildscript {
  repositories {
    flatDir dirs: "./lib/"
  }
  dependencies {
    classpath ":proguard"
  }
}

project(":TExtract") {
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  sourceCompatibility = 1.7
  version = '1.5.0'

  sourceSets.main.java.srcDirs = [ "src/" ]
  sourceSets.main.resources.srcDirs = [ "res/" ]
  sourceSets.test.java.srcDirs = [ "tests/" ]

  ext {
    mainClassName = "com.github.antag99.textract.TExtract"
  }

  repositories {
    mavenCentral()
  }

  dependencies {
    compile "commons-io:commons-io:2.4"
    compile "ar.com.hjg:pngj:2.0.1"
    compile "com.esotericsoftware:minlog:1.3.0"
  }

  // Creates a fat jar containing all dependencies
  task fatJar(type: Jar) {
    manifest {
      attributes 'Implementation-Title': project.name,
        'Implementation-Version': version,
        'Main-Class': mainClassName
    }
    archiveName = project.name + "Fat.jar"
    // Add the dependencies
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    from new File(buildDir, "VERSION.txt")
    with jar
  }

  // Shrinks the fat jar using proguard
  task optimizedJar(dependsOn: fatJar, type: proguard.gradle.ProGuardTask) {
    configuration "configuration.pro"

    // Gradle always seems to think the task is up-to-date, this is a workaround.
    outputs.upToDateWhen { false }
  }

  // Add the mapping to the obfuscated jar
  tasks.optimizedJar.doLast {
    ant.jar(update: "true", index: "true", destfile: "${buildDir}/libs/TExtract.jar") {
      fileset(file: "$buildDir/proguard.map")
    }
  }

  // Create a version notice
  processResources.doFirst {
    new File(buildDir, "VERSION.txt").text = version + "\n"
  }

  // Creates an executable file using Launch4j
  task launch4j(dependsOn: optimizedJar, type: JavaExec) {
    args "launch4j.xml"
    def os = System.getProperty("os.name")
    def jarFile
    if (os.contains("Windows")) {
      jarFile = new File(rootDir, "lib/launch4j/windows/launch4j.jar")
    } else if (os.contains("Linux")) {
      jarFile = new File(rootDir, "lib/launch4j/linux/launch4j.jar")
    } else if (os.contains("Mac")) {
      jarFile = new File(rootDir, "lib/launch4j/mac/launch4j.jar")
    } else {
      throw new RuntimeException("Launch4j is not available for: " + os)
    }
    classpath jarFile
    main = "net.sf.launch4j.Main"
  }
}
