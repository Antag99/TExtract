
buildscript {
  repositories {
    flatDir dirs: "./lib/"
    jcenter()
  }
  dependencies {
    classpath ":proguard"
    classpath 'de.undercouch:gradle-download-task:1.2'
  }
}

apply plugin: 'de.undercouch.download'

import de.undercouch.gradle.tasks.download.Download


// Installs Launch4j into the local directory
task installLaunch4j << {
  if (!new File(rootDir, "lib/launch4j/").exists()) {
    def os = System.getProperty("os.name")
    if (os.contains("Windows")) {
      def zip = new File(rootDir, "lib/launch4j-3.7-win32.zip")
      download {
        src "https://antag99.github.io/launch4j-3.7-win32.zip"
        dest zip
      }
      copy {
        from zipTree(zip)
        into new File(rootDir, "lib")
      }
    } else if (os.contains("Linux")) {
      def tar = new File(rootDir, "lib/launch4j-3.7-linux.tgz")
      download {
        src "https://antag99.github.io/launch4j-3.7-linux.tgz"
        dest tar
      }
      copy {
        from tarTree(tar)
        into new File(rootDir, "lib")
      }
    } else if (os.contains("Mac")) {
      def tar = new File(rootDir, "lib/launch4j-3.7-macosx-x86-10.8.tgz")
      download {
        src "https://antag99.github.io/launch4j-3.7-macosx-x86-10.8.tgz"
        dest tar
      }
      copy {
        from tarTree(tar)
        into new File(rootDir, "lib")
      }
    } else {
      throw new RuntimeException("Launch4j is not available for: " + os)
    }

    // Remove launch4j project files to prevent them from showing up in Eclipse
    new File(rootDir, "lib/launch4j/.project").delete();
    new File(rootDir, "lib/launch4j/.classpath").delete();
  }
}

project(":TExtract") {
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  sourceCompatibility = 1.7
  version = '1.4.2'

  sourceSets.main.java.srcDirs = [ "src/" ]
  sourceSets.main.resources.srcDirs = [ "res/" ]
  sourceSets.test.java.srcDirs = [ "tests/" ]

  ext {
    mainClassName = "com.github.antag99.textract.TExtract"
  }

  repositories {
      mavenCentral()
  }

  dependencies {
    compile "commons-io:commons-io:2.4"
    compile "ar.com.hjg:pngj:2.0.1"
  }


  // Creates a fat jar containing all dependencies
  task fatJar(type: Jar) {
    manifest {
      attributes 'Implementation-Title': project.name,
        'Implementation-Version': version,
        'Main-Class': mainClassName
    }
    archiveName = project.name + "Fat.jar"
    // Add the dependencies
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    from new File(buildDir, "VERSION.txt")
    with jar
  }

  // Shrinks the fat jar using proguard
  task optimizedJar(dependsOn: fatJar, type: proguard.gradle.ProGuardTask) {
    configuration "configuration.pro"

    // Gradle always seems to think the task is up-to-date, this is a workaround.
    outputs.upToDateWhen { false }
  }

  // Add the mapping to the obfuscated jar
  tasks.optimizedJar.doLast {
    ant.jar(update: "true", index: "true", destfile: "${buildDir}/libs/TExtract.jar") {
      fileset(file: "$buildDir/proguard.map")
    }
  }

  // Create a version notice
  processResources.doFirst {
    new File(buildDir, "VERSION.txt").text = version + "\n"
  }

  // Creates an executable file using Launch4j
  task launch4j(dependsOn: [ optimizedJar, installLaunch4j ], type: JavaExec) {
    args "launch4j.xml"
    classpath new File(rootDir, "lib/launch4j/launch4j.jar")
    main = "net.sf.launch4j.Main"
  }
}
